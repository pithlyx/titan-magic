active task : Create express endpoint
using router 
with app: "/api/mongo/", 
desired endpoints:["/:db/:collection","/:db/:collection?page=page","/:db/:collection?index=:indexToQuery","/:db/:collection?index=:indexToQuery&page=:page"]
i would like to query the provided index
if no index provided then default to returning the index for _id_
if the index is not a valid index then error:invalid index
i would like it to return a paginated list of 100 items from that index

Here is my current code
```
const express = require('express');
const { MongoClient } = require('mongodb');
const SCHEMA = require('./SCHEMAS');

const dbUri = `mongodb://192.168.1.28:27017/`;
const client = new MongoClient(dbUri);
const app = express();
const router = express.Router();

async function listDatabases() {
  await client.connect();
  const databases = await client.db().admin().listDatabases();
  return await Promise.all(
    databases.databases.map(async (db) => {
      const collections = await client.db(db.name).listCollections().toArray();
      return { [db.name]: collections.map((col) => col.name) };
    })
  );
}

router.get('/', async (req, res, next) => {
  try {
    await client.connect();
    await client.db().admin().ping();
    res.json({
      message: 'Welcome to the Titan-Magic API' /* ...other details */,
    });
  } catch (err) {
    next(err);
  } finally {
    await client.close();
  }
});

router.get('/:db/:collection/cards/:page', async (req, res, next) => {
  const { db, collection, page } = req.params;
  const { schema } = req.query;
  const pageSize = 10; // Number of objects per page
  const skipCount = (page - 1) * pageSize;

  try {
    await client.connect();
    const selectedCollection = client.db(db).collection(collection);

    const totalCount = await selectedCollection.countDocuments();
    const totalPages = Math.ceil(totalCount / pageSize);

    let attributesToReturn = getAttributesToReturn(schema);

    const cards = await selectedCollection
      .find()
      .project(
        attributesToReturn
          ? Object.fromEntries(attributesToReturn.map((attr) => [attr, 1]))
          : {}
      )
      .skip(skipCount)
      .limit(pageSize)
      .toArray();

    res.json({ cards, currentPage: page, totalPages });
  } catch (err) {
    next(err);
  } finally {
    await client.close();
  }
});

async function performSearch(selectedCollection, queries, schema) {
  const results = [];
  const attributesCount = {};
  let totalCount = 0;

  try {
    for (const query of queries) {
      const attribute = Object.keys(query.$and[0])[0];
      const attributeCount = await selectedCollection.countDocuments(query);

      if (attributeCount > 0) {
        totalCount += attributeCount;
        attributesCount[attribute] = attributeCount;
        results.push(...(await selectedCollection.find(query).toArray()));
      }
    }

    const attributesToReturn = getAttributesToReturn(schema);

    const response = {
      total_count: totalCount,
      attributes: attributesCount,
      results: results.map((doc) =>
        attributesToReturn
          ? attributesToReturn.reduce((obj, attr) => {
              obj[attr] = doc[attr];
              return obj;
            }, {})
          : doc
      ),
    };

    return response;
  } catch (err) {
    throw new Error('Error performing search: ' + err.message);
  }
}

function getAttributesToReturn(schema) {
  const availableSchemas = new Set([
    'meta',
    'play',
    'print',
    'face',
    'related',
  ]);

  if (availableSchemas.has(schema)) {
    return SCHEMA[schema];
  } else if (schema) {
    return schema.split(',');
  } else {
    return null; // Set to null if no schema is provided
  }
}

router.get('/:db/:collection/search', async (req, res, next) => {
  const { db, collection } = req.params;
  const { q, filter, schema } = req.query;
  const query = q;
  if (!query)
    return res.status(400).json({ error: 'Missing query parameter.' });

  const [value, attributeString] = query.split('|');
  const projection = attributeString.split(',');

  try {
    await client.connect();
    const selectedCollection = client.db(db).collection(collection);

    const filterConditions = filter
      ? filter.split('|').map((f) => {
          const [key, val] = f.split(':');
          const condition =
            val === 'false' || val === '!'
              ? false
              : val === 'true' || !val
              ? true
              : val.startsWith('#')
              ? isNaN(parseFloat(val.slice(1)))
                ? val.slice(1)
                : parseFloat(val.slice(1))
              : { $regex: new RegExp(val, 'i') };
          return { [key]: condition };
        })
      : [];

    const regexValue = new RegExp(value, 'i');
    const queries = projection.map((attr) => ({
      $and: [{ [attr]: { $regex: regexValue } }, ...filterConditions],
    }));

    if (typeof schema !== 'string') {
      return res
        .status(400)
        .json({ error: 'Invalid schema value. Expected a string.' });
    }

    const response = await performSearch(selectedCollection, queries, schema);
    res.json(response);
  } catch (err) {
    next(err);
  } finally {
    await client.close();
  }
});

router.get('/:db/:collection/attributes/:format', async (req, res, next) => {
  const { db, collection, format } = req.params;
  // const { } = req.query;
  const MAX_VALUES = 20; // Maximum number of values per attribute

  try {
    await client.connect();
    const selectedCollection = client.db(db).collection(collection);

    const attributes = await selectedCollection
      .find()
      .limit(100)
      .project({ _id: 0 })
      .toArray();

    if (format === 'values') {
      const attributeValues = {};

      attributes.forEach((document) => {
        for (const attribute in document) {
          const attributeValue = document[attribute];
          const attributeType = typeof attributeValue;

          if (!attributeValues[attribute]) {
            attributeValues[attribute] = {
              attribute: [],
              type: attributeType,
            };
          }

          if (Array.isArray(attributeValue)) {
            attributeValue.forEach((value) => {
              if (
                attributeValues[attribute].attribute.length < MAX_VALUES &&
                !attributeValues[attribute].attribute.includes(value)
              ) {
                attributeValues[attribute].attribute.push(value);
              }
            });
          } else if (attributeType === 'string' || attributeType === 'number') {
            if (
              attributeValues[attribute].attribute.length < MAX_VALUES &&
              !attributeValues[attribute].attribute.includes(attributeValue)
            ) {
              attributeValues[attribute].attribute.push(attributeValue);
            }
          } else if (attributeType === 'boolean') {
            if (attributeValues[attribute].attribute.length < MAX_VALUES) {
              if (!attributeValues[attribute].attribute.includes(true)) {
                attributeValues[attribute].attribute.push(true);
              }
              if (!attributeValues[attribute].attribute.includes(false)) {
                attributeValues[attribute].attribute.push(false);
              }
            }
          }
        }
      });

      res.json(attributeValues);
    } else if (format === 'types') {
      const attributeTypes = {};
      const document = attributes[0];

      for (const attribute in document) {
        const attributeValue = document[attribute];
        let attributeType = typeof attributeValue;

        if (Array.isArray(attributeValue)) {
          attributeType = 'array';
        } else if (attributeType === 'object' && attributeValue !== null) {
          attributeType = 'object';
        }

        attributeTypes[attribute] = {
          attribute: attribute,
          type: attributeType,
        };
      }

      res.json(attributeTypes);
    } else {
      const attributeList = Object.keys(attributes[0]);
      res.json({ attributes: attributeList });
    }
  } catch (err) {
    next(err);
  } finally {
    await client.close();
  }
});

app.use('/api/mongo', router);
app.use((err, req, res, next) => res.status(500).json({ error: err.message }));
app.use((err, req, res, next) => res.status(400).json({ error: err.message }));

listDatabases()
  .then(() =>
    app.listen(1337, () => console.log('API server listening on port 1337'))
  )
  .catch((err) =>
    console.error(
      'Failed to retrieve database and collection information:',
      err
    )
  );

```